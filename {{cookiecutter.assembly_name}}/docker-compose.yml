{%- if cookiecutter.database == "Postgresql" -%}
version: '3.8'

services:
  db:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: {{cookiecutter.database|lower}}
      POSTGRES_PASSWORD: {{cookiecutter.database|lower}}
      POSTGRES_DB: {{cookiecutter.assembly_name}}-container
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{cookiecutter.database|lower}}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migration:
    container_name: migration
    build:
      context: .
      dockerfile: src/{{cookiecutter.assembly_name}}.Migrations/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      Postgresql__ConnectionString: Host=db;Database={{cookiecutter.assembly_name}}-container;User Id={{cookiecutter.database|lower}};Password={{cookiecutter.database|lower}}

  {{cookiecutter.assembly_name|lower}}:
    image: ${DOCKER_REGISTRY-}{{cookiecutter.assembly_name|lower}}
    container_name: {{cookiecutter.assembly_name|lower}}
    hostname: {{cookiecutter.assembly_name|lower}}
    build:
      context: .
      dockerfile: src/{{cookiecutter.assembly_name}}/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      Postgresql__ConnectionString: Host=db;Database={{cookiecutter.assembly_name|lower}}-container;User Id={{cookiecutter.database|lower}};Password={{cookiecutter.database|lower}}
  {%- if cookiecutter.include_azure == "yes" -%}
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: storage
    hostname: azurite
    restart: always
    ports:
      - "10000:10000" 
      - "10001:10001"
      - "10002:10002"
  {% endif %}
{% endif %}

{%- if cookiecutter.database == "MongoDb" -%}
version: '3.1'

services:
  db:
    image: mongo
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: {{cookiecutter.database|lower}}
      MONGO_DB: {{cookiecutter.assembly_name}}-container
    volumes:
      - type: bind
        source: ./data
        target: /data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.runCommand("ping").ok' --quiet"]
      interval: 10s
      timeout: 5s
      retries: 5

migration:
    container_name: migration
    build:
      context: .
      dockerfile: src/{{cookiecutter.assembly_name}}.Migrations/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      MongoDb__ConnectionString: Host=db;Database={{cookiecutter.assembly_name}}-container;User Id=root;Password=MongoDb

  {{cookiecutter.assembly_name|lower}}:
    image: ${DOCKER_REGISTRY-}{{cookiecutter.assembly_name|lower}}
    container_name: {{cookiecutter.assembly_name|lower}}
    hostname: {{cookiecutter.assembly_name|lower}}
    build:
      context: .
      dockerfile: src/{{cookiecutter.assembly_name}}/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      MongoDb__ConnectionString: Host=db;Database={{cookiecutter.assembly_name|lower}}-container;User Id=root;Password=mongo
  {%- if cookiecutter.include_azure == "yes" -%}
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: storage
    hostname: azurite
    restart: always
    ports:
      - "10000:10000" 
      - "10001:10001"
      - "10002:10002"
  {% endif %}
{% endif %}